version: "3.5"
services:
  # Orion is the context broker
  orion:
    image: fiware/orion-ld
    hostname: orion
    container_name: fiware-orion
    depends_on:
      - mongo-db
    ports:
      - "1026:1026" # localhost:1026
    command: -dbhost mongo-db -logLevel DEBUG
    healthcheck:
      test: curl --fail -s http://orion:1026/version || exit 1
      interval: 5s

  # IoT-Agent is configured for the UltraLight Protocol
  iot-agent:
    image: fiware/iotagent-ul
    hostname: iot-agent
    container_name: fiware-iot-agent
    depends_on:
      - mongo-db
      - iot-manager
    ports:
      - "4041:4041" # localhost:4041
      - "7896:7896" # localhost:7896
    environment:
      - IOTA_CB_HOST=orion # name of the context broker to update context
      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
      - IOTA_CB_NGSI_VERSION=ld # use NGSIv2 when sending updates for active attributes
      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=27017 # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentul # The name of the database used in mongoDB
      - IOTA_PROVIDER_URL=http://iot-agent:4041
      - IOTA_NORTH_PORT=4041
      - IOTA_HTTP_PORT=7896
      - IOTA_DEFAULT_RESOURCE=/iot/d
      - IOTA_IOTAM_URL=http://iot-manager:8081
      - IOTA_IOTAM_PATH=/iot/protocols
      - IOTA_IOTAM_PROTOCOL=MQTT_UL
      - IOTA_IOTAM_DESCRIPTION=MQTT Ultralight 2.0 IoT Agent (Node.js version)
      - IOTA_IOTAM_AGENTPATH=/
    healthcheck:
      interval: 5s

  # IoT-Agent is configured for the UltraLight Protocol
  iot-agent2:
    image: fiware/iotagent-ul
    hostname: iot-agent2
    container_name: fiware-iot-agent2
    depends_on:
      - mongo-db
      - iot-manager
    environment:
      - IOTA_CB_HOST=orion # name of the context broker to update context
      - IOTA_REGISTRY_TYPE=mongodb #Whether to hold IoT device info in memory or in a database
      - IOTA_LOG_LEVEL=DEBUG # The log level of the IoT Agent
      - IOTA_TIMESTAMP=true # Supply timestamp information with each measurement
      - IOTA_CB_NGSI_VERSION=ld # use NGSIv2 when sending updates for active attributes
      - IOTA_AUTOCAST=true # Ensure Ultralight number values are read as numbers not strings
      - IOTA_MONGO_HOST=mongo-db # The host name of MongoDB
      - IOTA_MONGO_PORT=27017 # The port mongoDB is listening on
      - IOTA_MONGO_DB=iotagentul2 # The name of the database used in mongoDB
      - IOTA_PROVIDER_URL=http://iot-agent2:4041
      - IOTA_NORTH_PORT=4041
      - IOTA_HTTP_PORT=7896
      - IOTA_DEFAULT_RESOURCE=/iot/du
      - IOTA_IOTAM_URL=http://iot-manager:8081
      - IOTA_IOTAM_PATH=/iot/protocols
      - IOTA_IOTAM_PROTOCOL=UL
      - IOTA_IOTAM_DESCRIPTION=MQTT Ultralight 2.0 IoT Agent (Node.js version)
      - IOTA_IOTAM_AGENTPATH=/
    healthcheck:
      interval: 5s

  iot-manager:
    image: telefonicaiot/iotagent-manager
    hostname: iot-manager
    container_name: iot-manager
    depends_on:
      - mongo-db
    ports:
      - "8081:8081"
    environment:
      - IOTA_MONGO_HOST=mongo-db
      - IOTA_MONGO_PORT=27017
      - IOTA_SERVER_PORT=8081
      - IOTA_LOG_LEVEL=DEBUG


 # Database
  mongo-db:
    image: mongo
    hostname: mongo-db
    container_name: db-mongo
    healthcheck:
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`; 
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
      interval: 5s
    
    healthcheck:
      test: |
        host=`hostname --ip-address || echo '127.0.0.1'`; 
        mongo --quiet $host/test --eval 'quit(db.runCommand({ ping: 1 }).ok ? 0 : 2)' && echo 0 || echo 1
      interval: 5s
    
